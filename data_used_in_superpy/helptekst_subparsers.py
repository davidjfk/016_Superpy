import textwrap



buy = "   Goal: buy product and add to file bought.csv \n   ex1: py super.py buy apple 1.75 -b 23-09-15 -e 23-09-27 \n   product: apple,  price: E 1.75, buy_date: 23-09-15, expiry_date: 23-09-27\n\n   ex2: py super.py buy linseed 3.00 -e 23-09-28 \n   product: linseed, price: &euro; 3.00, buy_date: system_date as default, expiry_date: 23-09-28\n\n   ex3: py super.py buy cabbage 0.73 \n   product: cabbage, price: E 0.73, buy_date: system_date as default, expiry_date:  'does not expire' as default \n\n   arg1: positional argument product: e.g. apple, potato, milk\n   arg2: positional argument price, in euros: e.g. 1.24, 0.3, 0.35\n   arg3: optional argument -buy_date, -b (ex: 2023-09-15) with system_date as default value. \n   arg4: optional argument -expiry_date, -e (ex: 2023-10-03) with default value 'does not expire' \n\n   arg with date value can be entered in format YYYY-MM-DD: e.g. 2029-02-03 , or as a word (exhaustive list):\n   today, tomorrow, overmorrow, yesterday, next_monday (...) next_sunday.\n   Reference point: today == system_date (see definition of system_date) \n\n"



create_mock_data = "   Goal: create mock data for bought.csv and sold.csv\n   All 14 arguments have default values that can be changed in (...\superpy\super.py --> goto CONSTANTS at start of main.py()) \n   All 14 arguments are optional, so you can do this:  \n   ex with just default arguments: \n   py super.py create_mock_data \n   result: bought.csv and sold.csv are filled with mockdata that has \n   been created with default values.   \n\n   arg1 = nr_of_products: \n   flags: -nopro, -nr_of_products\n   nr of products == product_assortment == the nr of different products in Superpy.\n   minimum value: 1 \n   maximum value: 50 \n   ex1: py super.py create_mock_data -nopro 3 \n   nr of random products: 3, e.g. 'apple', 'cabbage' and 'beetroot' as input to create mock data \n   ex2: py super.py create_mock_data -nopro 2 \n   nr of random products: 3, e.g. 'coffee' and 'potato' as input to create mock data. \n   More products lead to more rows in bought.csv and sold.csv.  \n\n   arg2 = nr_of_prices: \n   flags: -nopri, -nr_of_prices\n   nr of different prices in Superpy.\n   minimum value: 1 \n   maximum value: NA \n   ex1: py super.py create_mock_data -nopri 3 \n   nr of random prices: 3, e.g. [0.79, 1.43, 8.94] as input to create mock data \n   ex2: py super.py create_mock_data -nopro 6 \n   e.g. [9.33, 8.23, 0.23, 0.11, 4.85, 1.49]. \n   More prices lead to more rows in bought.csv and sold.csv.   \n\n   arg3 = lowest price in interval: \n   flags: -lp, -lowest_price_in_interval\n   Lowest price in interval to calculate mock data with, e.g. E 0.09.\n   minimum value: 0.00 \n   maximum value: NA \n   ex1: py super.py create_mock_data -lp 0.79 \n   Lowest price in created mock data is E 0.79.\n   ex2: py super.py create_mock_data -lp 2.23 \n   Lowest price in created mock data is E 2.23. \n\n   arg4 = highest price in interval: \n   flags: -hp, -highest_price_in_interval\n   Highest price in interval to calculate mock data with, e.g. E 15.14.\n   minimum value: 0.00 \n   maximum value: NA \n   ex1: py super.py create_mock_data -hp 8.34 \n   Highest price in created mock data is E 8.34.\n   ex2: py super.py create_mock_data -hp 22.23 \n   Highest price in created mock data is E 22.23. \n\n   arg5 =  delete every nth row in sold.csv \n   flags: -denr, -delete_every_nth_row \n   Deleting rows in sold.csv makes them expire while time travelling: \n   After creating mock data for bought.csv, a copy is made to create sold.csv. \n   Then rows are deleted from sold.csv (e.g. every 3rd row). \n   By time travelling to the future these bought_products (e.g. every 3rd row) will expire.   \n   ex1: py super.py create_mock_data -denr 3 \n   delete_every_nth_row: 3  \n\n   arg6 = shelf_life == shelf_time == number of days between buying a product and \n   its expiry_date. \n   flags: -sl, -shelf_life  \n   ex1: py super.py create_mock_data -sl 10\n   shelf_life: 10 days \n   result: a bought product will expire after 10 days.\n\n   arg7 = turnover_time == inventory turnover == the number of days \n   between buying and selling a product. \n   flags: -turnover_time, -tt  \n   ex1: py super.py create_mock_data -tt 4\n   turnover_time: 4 days  \n\n   arg8 = markup = the amount of money a business adds to the cost of a  \n   product or service in order to make a profit. \n   In super.py markup is calculated as a factor: ex: if buy_price is 3 euro and \n   sell_price is 4 euro, then markup is 4/3 = 1.33 \n   flags: -mu, -markup  \n   ex: py super.py create_mock_data -mu 3 \n    markup: factor 3  \n   result: if buy_price in bought.csv is 3 euro, then sell_price will be 9 euro in sold.csv.  \n\n   arg9 = lower_boundary_year == lower_boundary_year_of_time_interval_in_which_to_create_random_testdata. \n   flags: -lby, -lower_boundary_year  \n   ex1: py super.py create_mock_data -lby 2024\n   lower_boundary_year: 2024  \n\n   arg10 = lower_boundary_month == lower_boundary_month_of_time_interval_in_which_to_create_random_testdata. \n   flags: -lbm, -lower_boundary_month  \n   ex1: py super.py create_mock_data -lbm 10\n   lower_boundary_month: October  \n\n   arg11 = lower_boundary_day == lower_boundary_day_of_time_interval_in_which_to_create_random_testdata.  \n   flags: -lbd, -lower_boundary_day  \n   ex1: py super.py create_mock_data -lbd 15  \n   lower_boundary_day: 15th day of  the  month \n\n   arg12 =  nr_of_months_to_calculate_upper_boundary_month    \n   flags: -ubm, -upper_boundary_month_nr   \n   ex1: py super.py create_mock_data -ubm 3\n   nr_of_months_to_calculate_upper_boundary_month: 3 months  \n   result: upper boundary month of time interval in which to create data is 3 months in the future. \n   default value: 0 months.  \n\n   arg13 = nr_of_weeks_to_calculate_upper_boundary_week. \n   flags: -ubw, -upper_boundary_weeknr  \n   ex1: py super.py create_mock_data -ubw 8\n   nr_of_weeks_to_calculate_upper_boundary_week: 8 months  \n   result: upper boundary week of time interval in which to create data is 8 weeks in the future.  \n\n   arg14 = nr_of_days_to_calculate_upper_boundary_day. \n   flags: -ubd, -upper_boundary_day_nr  \n   ex: py super.py create_mock_data -ubd 3\n   nr_of_days_to_calculate_upper_boundary_day: 3 days  \n   result: upper boundary day of time interval in which to create data is 3 days in the future.  \n   default value: 0 days.\n\n" 



delete = "   Goal1: delete all transaction records in bought.csv and sold.csv. \n   ex: py super.py delete \n   result: all transaction records in bought.csv and sold.csv have been deleted\n   arg1: NA   \n\n"

description_tekst_general = "See 'py super.py -h' for more info. (bug in vsCode: multi-line comments in this description field not possible a.t.m.)\n\n" 
                               

reset_system_date = "   Goal: reset SYSTEM_DATE to current date of hosting device.\n   ex: py super.py reset_system_date \n   result: e.g. 2024-06-12 (from e.g. laptop on which superpy is running).  \n\n"

sell = "   Goal: sell product and add to file sold.csv \n   Preparation:  lookup products and their buy_ids in the inventory: e.g. \n   py super.py show_inventory -d 2024-03-15 \n\n   then:\n   ex1: \n   py super.py sell fig 3.75 -s 2023-11-15 \n   py super.py b_492 3.75 -s 2023-11-15 \n   product fig with buy_id b_15 in bought.csv is sold, price: E 3.75, sell_date: 23-11-15\n   tip: quicker to buy with product name here.\n\n   ex2:\n   py super.py Cold_Pressed_Extra_Virgin_Olive_Oil_with_Lemon_and_Garlic 5.15 \n   py super.py b_16 5.15 \n   product Cold...Oil with buy_id b_15 in bought.csv is sold, \n   price: E 5.15, sell_date: system_date as default\n   tip: quicker to buy with buy_id here.\n\n   arg1: positional argument product_name_or_buy_id: \n   E.g. as product: apple, quinoa, bulgur, linseed, soft cheeese,\n   etc. E.g. as buy_id: b_01, b_02 (...), b_103, etc. \n   arg2: positional argument price, in euros: e.g. 1.24, 0.3, 0.35\n   arg3: optional argument -sell_date, -s (ex: -sd 2023-09-15) with system_date as default value. \n\n   arg with date value can be entered in format YYYY-MM-DD: e.g. \n   2029-02-03 , or as a word (exhaustive list):\n   today, tomorrow, overmorrow, yesterday, next_monday (...) next_sunday.\n   Reference point: today == system_date (see definition of system_date) \n\n"


set_system_date = "   Goal: set_system_date_to a specific date in the file system_date.txt\n   ex1: py super.py set_date 2025-01-01 \n   system_date: 2025-01-01\n   result: 'Superpy system_date is set to date (e.g.) 2028-03-10' \n\n   arg1: positional argument system_date, e.g. 2023-10-11. \n   --> string representation in format 'yyy-mm-dd'\n\n   arg with date value can be entered in format YYYY-MM-DD: e.g. 2029-02-03 , or as a word (exhaustive list):\n   today, tomorrow, overmorrow, yesterday, next_monday (...) next_sunday.\n   Reference point: today == system_date (see definition of system_date) \n\n" 

show_bought_csv = "   Goal: show all data from bought.csv in a table in the terminal \n   ex: py super.py show_bought_csv \n   result: bought.csv is shown in the terminal as a table.   \n\n"

show_cost = "   Goal: show cost in time range between start_date and end_date inclusive. \n   ex1: py super.py show_cost -sd 2023-09-01 -ed 2023-10-10 \n   start_date: 2023-09-01 \n   end_date: 2023-10-10 \n   result in terminal: \n   'Cost from start_date: 2023-09-01 to end_date: 2023-10-10 inclusive: Euro 27.9'  \n\n   ex2: py super.py show_cost -ed 2023-10-05 \n   start_date is start of financial  year of system_date. e.g. if system_date 23-06-08, then: 23-01-01.\n   end_date: 2023-10-05 \n   result in terminal: \n   'Cost from start_date: 2023-01-01 to end_date: 2023-10-05 inclusive: Euro 18.6'   \n\n   ex3: py super.py show_profit -sd 2023-07-01 \n   start_date: 2023-07-01 \n   end_date is by default system_date \n   result in terminal: \n   'Cost from start_date: 2023-07-01 to end_date: 2023-09-17 inclusive: Euro 9.9' \n   end_date has by default system_date.  \n\n   arg1: optional argument start_date in format 'YYYY-MM-DD'. ex: -sd 2023-09-01, or: -start_date 2023-09-01 \n   default value is january 1st of year from system_date: e.g. if system_date is 23-06-28, \n   then default value is 23-01-01. \n   reason: often you want to know the cost of the current financial year until today inclusive. \n\n   arg2: optional argument end_date in format 'YYYY-MM-DD'. ex: -ed 2023-10-15, or: -end_date 2023-10-15 \n   default value is system_date, because often you want to know the cost of the \n   current financial year until today  inclusive.  \n\n"

show_expired_products = "   Goal: calculate expired products on a day in format 'YYYY-MM-DD' (e.g. 2023-09-28) \n   ex1: py super.py show_expired_products -d 2023-09-28\n   date: 2023-09-28   \n   result is displayed in a table in the terminal. \n\n   ex2: py super.py show_expired_products\n   date: by default system_date\n   results is displayed in a table in the terminal. \n\n   arg1: optional argument date in following format: 'YYYY-MM-DD'. ex: -d 2026-10-21 \n   default value is system_date.\n   reason: often you want to know which products expire today.  \n\n"


show_inventory = "   Goal: calculate inventory on a day in format 'YYYY-MM-DD' (e.g. 2023-09-28) \n   ex1: py super.py show_inventory -d 2023-09-28\n   date: 2023-09-28   \n   result is displayed in a table in the terminal. \n\n   ex2: py super.py show_inventory\n   date: by default system_date\n   results is displayed in a table in the terminal. \n\n   arg1: optional argument date in following format: 'YYYY-MM-DD'. ex: -d 2026-10-21 \n   default value is system_date.\n   reason: often you want to know which products expire today.  \n\n"

show_profit = "   Goal: show profit in time range between start_date and end_date inclusive. \n   ex1: py super.py show_profit -sd 2023-09-01 -ed 2023-10-10 \n   start_date: 2023-09-01 \n   end_date: 2023-10-10 \n   result in terminal: \n   'Profit from start_date: 2023-09-01 to end_date: 2023-10-10 inclusive: Euro 27.9'  \n\n   ex2: py super.py show_profit -ed 2023-10-05 \n   start_date is start of financial  year of system_date. e.g. if system_date 23-06-08, then: 23-01-01.\n   end_date: 2023-10-05 \n   result in terminal: \n   'Profit from start_date: 2023-01-01 to end_date: 2023-10-05 inclusive: Euro 18.6'   \n\n   ex3: py super.py show_profit -sd 2023-07-01 \n   start_date: 2023-07-01 \n   end_date is by default system_date \n   result in terminal: \n   'Profit from start_date: 2023-07-01 to end_date: 2023-09-17 inclusive: Euro 9.9' \n   end_date has by default system_date.  \n\n   arg1: optional argument start_date in format 'YYYY-MM-DD'. ex: -sd 2023-09-01, or: -start_date 2023-09-01 \n   default value is january 1st of year from system_date: e.g. if system_date is 23-06-28,\n   then default value is 23-01-01. \n   reason: often you want to know the profit of the current financial year until today inclusive. \n\n   arg2: optional argument end_date in format 'YYYY-MM-DD'. ex: -ed 2023-10-15, or: -end_date 2023-10-15 \n   default value is system_date, because often you want to know the cost of the current financial \n   year until today  inclusive.  \n\n"


show_revenue = "   Goal: show revenue in time range between start_date and end_date inclusive. \n   ex1: py super.py show_revenue -sd 2023-09-01 -ed 2023-10-10 \n   start_date: 2023-09-01 \n   end_date: 2023-10-10 \n   result in terminal: \n   'Revenue from start_date: 2023-09-01 to end_date: 2023-10-10 inclusive: Euro 27.9'  \n\n   ex2: py super.py show_revenue -ed 2023-10-05 \n   start_date is start of financial  year of system_date. e.g. if system_date 23-06-08, then: 23-01-01.\n   end_date: 2023-10-05 \n   result in terminal: \n   'Revenue from start_date: 2023-01-01 to end_date: 2023-10-05 inclusive: Euro 18.6'   \n\n   ex3: py super.py show_revenue -sd 2023-07-01 \n   start_date: 2023-07-01 \n   end_date is by default system_date \n   result in terminal: \n   'Revenue from start_date: 2023-07-01 to end_date: 2023-09-17 inclusive: Euro 9.9' \n   end_date has by default system_date.  \n\n   arg1: optional argument start_date in format 'YYYY-MM-DD'. ex: -sd 2023-09-01, or: -start_date 2023-09-01 \n   default value is january 1st of year from system_date: e.g. if system_date is 23-06-28, \n   then default value is 23-01-01. \n   reason: often you want to know the revenue of the current financial year until today inclusive. \n\n   arg2: optional argument end_date in format 'YYYY-MM-DD'. ex: -ed 2023-10-15, or: -end_date 2023-10-15 \n   default value is system_date, because often you want to know the cost of the current financial \n   year until today  inclusive.  \n\n"


show_sales_volume = "   Goal: show sales volume in time range between start_date and end_date inclusive. \n   ex1: py super.py show_sales_volume -sd 2023-09-01 -ed 2023-10-10 \n   start_date: 2023-09-01 \n   end_date: 2023-10-10 \n   result in terminal: \n   'Sales Volume from start_date: 2023-09-01 to end_date: 2023-10-10 inclusive: Euro 27.9'  \n\n   ex2: py super.py show_sales_volume -ed 2023-10-05 \n   start_date is start of financial  year of system_date. e.g. if system_date 23-06-08, then: 23-01-01.\n   end_date: 2023-10-05 \n   result in terminal: \n   'Sales volume from start_date: 2023-01-01 to end_date: 2023-10-05 inclusive: Euro 18.6'   \n\n   ex3: py super.py show_sales_volume -sd 2023-07-01 \n   start_date: 2023-07-01 \n   end_date is by default system_date \n   result in terminal: \n   'Sales volume from start_date: 2023-07-01 to end_date: 2023-09-17 inclusive: Euro 9.9' \n   end_date has by default system_date.  \n\n   arg1: optional argument start_date in format 'YYYY-MM-DD'. ex: -sd 2023-09-01, or: -start_date 2023-09-01 \n   default value is january 1st of year from system_date: e.g. if system_date is 23-06-28, \n   then default value is 23-01-01. \n   reason: often you want to know the sales volume of the current financial year until today inclusive. \n\n   arg2: optional argument end_date in format 'YYYY-MM-DD'. ex: -ed 2023-10-15, or: -end_date 2023-10-15 \n   default value is system_date, because often you want to know the cost of the current financial \n   year until today  inclusive.  \n\n"


show_sold_csv = "   Goal: show all data from sold.csv in a table in the terminal. \n   ex: py super.py show_sold_csv \n   result: sold.csv is shown in the terminal as a table   \n\n"



show_system_date = "   Goal: show system_date \n   ex: py super.py show_system_date\n   result: 2024-03-10\n\n   arg1: NA\n "


travel_time_help_tekst = "   Goal: change system_date by adding or subtracting nr of day(s) \n   ex1: py super.py travel_time 3.\n   nr_of_days: 3 \n   result: you travel with 3 days to the future. So if system_date is 2024-03-10, then \n   new date becomes 2024-03-13 in the future.\n\n   ex2: py super.py travel_time -3\n   nr_of_days: -3 \n   result: you travel with 3 days to the past. So if system date is 2024-03-10, \n   then new date becomes 2024-03-07 in the past.\n\n   arg1: positional argument days to add or subtract from system_date: e.g. 9, -8, etc.\n "

valid_date_format = "format: 'YYYY-MM-DD'. ex: 2026-10-21"